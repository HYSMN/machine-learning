


from keras.preprocessing.sequence import pad_sequences

import pandas as pd
import numpy as np
from sklearn.metrics import accuracy_score
from sklearn.metrics import confusion_matrix, precision_score, recall_score, f1_score, cohen_kappa_score
from keras.utils.vis_utils import plot_model
from sklearn.metrics import confusion_matrix
from keras.layers.normalization import BatchNormalization
from sklearn import metrics, cross_validation, preprocessing
# sklearn support
from sklearn import metrics, cross_validation, preprocessing
from sklearn.datasets.base import Bunch
from sklearn.model_selection import cross_val_score, cross_val_predict
from sklearn.pipeline import make_pipeline
from sklearn.model_selection import ShuffleSplit, StratifiedKFold
from sklearn.ensemble import RandomForestRegressor
import matplotlib.pyplot as plt
import seaborn as sns

import keras
import keras_metrics
from keras import backend as K
import time

input_file = 'input.csv'



def load_data(test_split = 0.2):
    print ('Loading data...')
    df = pd.read_csv(input_file)
    df['sequence'] = df['sequence'].apply(lambda x: [int(e) for e in x.split()])
    df = df.reindex(np.random.permutation(df.index))

    train_size = int(len(df) * (1 - test_split))

    X_train = df['sequence'].values[:train_size]
    y_train = np.array(df['target'].values[:train_size])
    X_test = np.array(df['sequence'].values[train_size:])
    y_test = np.array(df['target'].values[train_size:])

    return pad_sequences(X_train), y_train, pad_sequences(X_test), y_test


def train_and_test():
    rf = RandomForestRegressor(n_estimators = 1000, random_state = 42)
    rf.fit(X_train,y_train)
    y_prediction = rf.predict(X_test)
    print(y_prediction)
        # Calculate the absolute errors
    errors = abs(y_prediction - y_test)
    print(errors)
    confusion_matrix(y_test, y_prediction)






X_train, y_train, X_test, y_test = load_data()

#training Step
train_and_test()



#comparing with other metrics
