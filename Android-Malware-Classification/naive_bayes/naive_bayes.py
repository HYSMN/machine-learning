from keras.preprocessing.sequence import pad_sequences
import pandas as pd
import numpy as np
from sklearn.metrics import confusion_matrix, precision_score, recall_score, f1_score, cohen_kappa_score
from keras.utils.vis_utils import plot_model
from sklearn.metrics import confusion_matrix
from keras.layers.normalization import BatchNormalization
from sklearn import metrics, cross_validation, preprocessing
# sklearn support
from sklearn import metrics, cross_validation, preprocessing
from sklearn.datasets.base import Bunch
from sklearn.model_selection import cross_val_score, cross_val_predict
from sklearn.pipeline import make_pipeline
from sklearn.model_selection import ShuffleSplit, StratifiedKFold
from sklearn.naive_bayes import GaussianNB
import matplotlib.pyplot as plt
import seaborn as sns

import keras
import keras_metrics
from keras import backend as K
import time

input_file = 'input.csv'

def load_data(test_split = 0.2):
    print ('Loading data...')
    df = pd.read_csv(input_file)
    df['sequence'] = df['sequence'].apply(lambda x: [int(e) for e in x.split()])
    df = df.reindex(np.random.permutation(df.index))

    train_size = int(len(df) * (1 - test_split))

    X_train = df['sequence'].values[:train_size]
    y_train = np.array(df['target'].values[:train_size])
    X_test = np.array(df['sequence'].values[train_size:])
    y_test = np.array(df['target'].values[train_size:])

    return pad_sequences(X_train), y_train, pad_sequences(X_test), y_test


def _plot_model():
    fig = plt.figure(figsize=(7,7))
    ax = fig.add_subplot(111)
    sns.heatmap(metrics.confusion_matrix(y_test, y_prediction),
            cmap="GnBu", square=True, ax=ax)
    ax.set_title('Heatmap: Confusion Matrix for \nNB Classifier Model')
    ax.set_xlabel('Predicted ')
    ax.set_ylabel('Actual ')
    plt.show()

def get_metrices():
    print (metrics.classification_report(y_test, y_prediction))


X_train, y_train, X_test, y_test = load_data()

#training Step
clf = GaussianNB()
clf.fit(X_train,y_train)
print(clf)

#
y_prediction = clf.predict(X_test)
print (clf.score(X_test,y_test))

get_metrices()

_plot_model()


#comparing with other metrics
